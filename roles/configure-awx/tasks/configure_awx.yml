
- name: Ensure /var/lib/awx has correct permissions for webhook user
  file:
    path: '/var/lib/awx'
    owner: root
    group: root
    mode: '0755'
    state: directory

- name: Install jq for token probe
  apt:
    pkg:
    - jq

- name: Collect AWX admin token the hard way!
  shell: |
      curl -sku admin:{{ admin_password }} -H "Content-Type: application/json" -X POST -d '{"description":"Tower CLI", "application":null, "scope":"write"}' https://{{ awx_url }}/api/v2/users/1/personal_tokens/ | jq '.token' | sed -r 's/\"//g'
  register: tower_token
  no_log: True

- name: Remove 'Demo Job Template' job template
  awx.awx.tower_job_template:
    name: "Demo Job Template"
    job_type: run
    project: "Demo Project"
    playbook: hello_world.yml
    state: absent
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes
  ignore_errors: yes

- name: Remove 'Demo Project' project from 'Default' organisation
  awx.awx.tower_project:
    name: "Demo Project"
    organization: "Default"
    state: absent
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes
  ignore_errors: yes

- name: Remove 'Demo Inventory'
  awx.awx.tower_inventory:
    name: "Demo Inventory"
    organization: "Default"
    state: absent
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes
  ignore_errors: yes

- name: Remove 'Demo Credential' credential
  awx.awx.tower_credential:
    name: "Demo Credential"
    user: "admin"
    kind: ssh
    state: absent
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes
  ignore_errors: yes

- name: Remove 'Default' organisation
  awx.awx.tower_organization:
    name: "Default"
    state: absent
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes
  ignore_errors: yes

- name: Create the admin organisation
  awx.awx.tower_organization:
    name: "{{ org_name }} [Admin]"
    description: "The main organisation that is used to manage other organisations."
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Add admin user to their organisation
  awx.awx.tower_role:
    user: "admin"
    organization: "{{ org_name }} [Admin]"
    role: member
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Add inventory to the admins organisation
  awx.awx.tower_inventory:
    name: "{{ org_name }} [Admin]"
    description: "{{ org_name }} inventory"
    organization: "{{ org_name }} [Admin]"
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Allow admin account to administrate/use this inventory
  awx.awx.tower_role:
    user: "admin"
    inventory: "{{ org_name }} [Admin]"
    role: use
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Add localhost to the admins inventory
  awx.awx.tower_host:
    name: "localhost"
    description: "The AWX server itself."
    inventory: "{{ org_name }} [Admin]"
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Set vault_unlock_ssh_password key file
  delegate_to: 127.0.0.1
  become: false
  shell: |
    echo -n {{ vault_unlock_ssh_password }} > /tmp/vault.key
  no_log: true
  
- name: Set plaintext_ssh_password variable file
  delegate_to: 127.0.0.1
  become: false
  shell: |
    echo "---\nclient_private_ssh_key_password: '{{ client_private_ssh_key_password }}'" > /tmp/plaintext_ssh_password.yml
  no_log: true

- name: Encrypt the contents of plaintext_ssh_password variable file
  delegate_to: 127.0.0.1
  become: false
  shell: |
    ansible-vault encrypt --vault-id unlock_ssh_password@/tmp/vault.key --output=/tmp/vaulted_ssh_password.yml /tmp/plaintext_ssh_password.yml
  no_log: true
     
- name: Copy vaulted_ssh_password.yml to the AWX hosting folder
  copy:
    src: /tmp/vaulted_ssh_password.yml
    dest: /var/lib/awx/projects/hosting/vaulted_ssh_password.yml
    decrypt: no
    owner: root
    group: root
    mode: '0600'

- name: Shred the vault_unlock_ssh_password key file
  delegate_to: 127.0.0.1
  become: false
  shell: |
    shred -u /tmp/vault.key
     
- name: Shred the plaintext_ssh_password variable file
  delegate_to: 127.0.0.1
  become: false
  shell: |
    shred -u /tmp/plaintext_ssh_password.yml
    
- name: Shred the vaulted_ssh_password variable file
  delegate_to: 127.0.0.1
  become: false
  shell: |
    shred -u /tmp/vaulted_ssh_password.yml
     
- name: Add Unlock SSH Password credential to admin users account
  awx.awx.tower_credential:
    name: "Unlock SSH Password"
    description: "The password to unlock the variable file containing the client systems SSH key password."
    credential_type: Vault
    organization: "{{ org_name }} [Admin]"
    inputs: 
      vault_id: unlock_ssh_password
      vault_password: "{{ vault_unlock_ssh_password }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Add 'Ansible Create Delete Subscription Membership' project to AWX admins organisation
  awx.awx.tower_project:
    name: "Ansible Create Delete Subscription Membership"
    description: "The script is run after a memberpress subscription is created, a 'plan_title' is specified, this causes a digitalocean or on-premises provision stage to be setup. Or it deletes a single subscription, and/or an entire membership/organisation from the AWX setup."
    organization: "{{ org_name }} [Admin]"
    scm_type: git
    scm_url: "{{ create_delete_source }}"
    scm_branch: "{{ create_delete_branch }}"
    scm_delete_on_update: yes
    scm_update_on_launch: yes
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Update 'Ansible Create Delete Subscription Membership' project
  awx.awx.tower_project_update:
    name: "Ansible Create Delete Subscription Membership"
    timeout: 300
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

# This module is renamed to awx.awx.inventory_source_update in AWX v19

- name: Create '00 - Create Account' job template
  awx.awx.tower_job_template:
    name: "00 - Create Account"
    description: "Performs initial organisation/team creation before subscription is confirmed."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: pre_create.yml
    extra_vars: "{{ lookup('file', '{{ role_path }}/extra-vars/create-account.json') }}"
    ask_extra_vars: yes
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Create Manual Subscription' job template
  awx.awx.tower_job_template:
    name: "00 - Create Manual Subscription"
    description: "Creates AWX Account for user, append random string to 'byo', creates initial organisation.yml and server_vars.yml file. Also creates a '[subscription_id] Provision Server' playbook in users account, where they will instead be prompted to connect their own server."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: create.yml
    credentials: "Unlock SSH Password"
    ask_extra_vars: yes
    survey_enabled: true
    survey_spec: "{{ lookup('file', '{{ role_path }}/surveys/manual_subsription.json.j2') }}"
    state: present
    verbosity: 1
    job_tags: manual-subscription
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Create MP Subscription' job template
  awx.awx.tower_job_template:
    name: "00 - Create MP Subscription"
    description: "Creates AWX Account for user, creates initial organisation.yml and server_vars.yml file. Creates a DigitalOcean droplet and space. Also creates initial '[subscription_id] Provision Server' playbook in users account."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: create.yml
    credentials: "Unlock SSH Password"
    extra_vars: "{{ lookup('file', '{{ role_path }}/extra-vars/create-mp.json') }}"
    ask_extra_vars: yes
    state: present
    verbosity: 1
    skip_tags: manual-subscription
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes
    
- name: Create '00 - Create Wireguard Server' job template
  awx.awx.tower_job_template:
    name: "00 - Create Wireguard Server"
    description: "Configures a wireguard server AWX can use to SSH into an on-premises server."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: setup_wireguard_server.yml
    survey_enabled: true
    survey_spec: "{{ lookup('file', '{{ role_path }}/surveys/setup_wireguard_server.json') }}"
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Delete Membership' job template
  awx.awx.tower_job_template:
    name: "00 - Ansible Delete Membership"
    description: "Playbook to remove clients AWX organisation and local files on the AWX server."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: delete_member.yml
    extra_vars: "{{ lookup('file', '{{ role_path }}/extra-vars/delete-member.json') }}"
    ask_extra_vars: yes
    state: present
    verbosity: 1
    job_tags: delete-membership
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Delete Subscription' job template
  awx.awx.tower_job_template:
    name: "00 - Delete Subscription"
    description: "Removes job templates, digitalocean resources, and files/folders associated with a subscription."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: schedule_delete_subscription.yml
    extra_vars: "{{ lookup('file', '{{ role_path }}/extra-vars/delete-subscription.json') }}"
    ask_extra_vars: yes
    state: present
    verbosity: 1
    job_tags: schedule-delete-subscription
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Cleanup Deletion Template' job template
  awx.awx.tower_job_template:
    name: "00 - Cleanup Deletion Template"
    description: "Deletes the remaining '<< SUBSCRIPTION DELETION IN PROGRESS >>' template."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: cleanup_deletion_job_template.yml
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Deploy/Update All Servers' job template
  awx.awx.tower_job_template:
    name: "00 - Deploy/Update All Servers"
    description: "Checks for updates hourly, if ones available it applies it to every Matrix server connected to AWX."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: deploy_all.yml
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Backup All Servers' job template
  awx.awx.tower_job_template:
    name: "00 - Backup All Servers"
    description: "Performs a sequential backup of every server connected to AWX."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: backup_all.yml
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes
  when: backup_server_enabled|bool

- name: Create '00 - Reprovision All Servers' job template
  awx.awx.tower_job_template:
    name: "00 - Reprovision All Servers"
    description: "Re-provisions every Matrix server connected to AWX."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: reprovision_all.yml
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Collect timezone of AWX server (Debian and derivatives only) 
  command: cat /etc/timezone
  register: timezone_output

- name: Create an rrule string for a daily schedule
  set_fact:
    rrule_line_daily: "DTSTART;TZID={{ timezone_output.stdout }}:20200101T000000 RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=SU,MO,TU,WE,TH,FR,SA"

- name: Build a schedule for '00 - Backup All Servers' job template
  awx.awx.tower_schedule:
    name: "00 - Backup All Servers Schedule"
    enabled: yes
    state: present
    unified_job_template: "00 - Backup All Servers"
    rrule: "{{ rrule_line_daily }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create an rrule string for a hourly schedule
  set_fact:
    rrule_line_hourly: "DTSTART;TZID={{ timezone_output.stdout }}:20200101T000000 RRULE:FREQ=HOURLY;INTERVAL=1"

- name: Build a schedule for '00 - Deploy/Update All Servers' job template
  awx.awx.tower_schedule:
    name: "00 - Deploy/Update All Servers Schedule"
    enabled: yes
    state: present
    unified_job_template: "00 - Deploy/Update All Servers"
    rrule: "{{ rrule_line_hourly }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Restore and Import Postgresql Dump' job template
  awx.awx.tower_job_template:
    name: "00 - Restore and Import Postgresql Dump"
    description: "Restores a servers configs, media repo and postgresql database from /chroot/backup/."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: create.yml
    extra_vars: "{{ lookup('file', '{{ role_path }}/extra-vars/restore-and-import-postgresql-dump.json') }}"
    ask_extra_vars: yes
    state: present
    verbosity: 1
    job_tags: import-postgres, import-awx
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Create '00 - Bind User Account' job template
  awx.awx.tower_job_template:
    name: "00 - Bind User Account"
    description: "Binds an enterprise user account to the correct team."
    job_type: run
    inventory: "{{ org_name }} [Admin]"
    project: "Ansible Create Delete Subscription Membership"
    playbook: bind_user_account.yml
    extra_vars: "{{ lookup('file', '{{ role_path }}/extra-vars/bind-user-account.json') }}"
    ask_extra_vars: yes
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes

- name: Install awx.awx collection in AWX docker
  command: docker exec awx_task /bin/bash -l -c "ansible-galaxy collection install --force awx.awx:17.1.0"

- name: Install community.digitalocean collection in AWX docker
  command: docker exec awx_task /bin/bash -l -c "ansible-galaxy collection install --force community.digitalocean"
