
- name: Install borgmatic on AWX
  apt:
    pkg:
    - borgmatic

- name: Install borgmatic on backup server
  delegate_to: '{{ backup_server_hostname }}'
  apt:
    pkg:
    - borgmatic

- name: Ensure backup location exists
  delegate_to: '{{ backup_server_hostname }}'
  file:
    path: '{{ backup_server_directory }}/AWX/{{ awx_url }}'
    owner: '{{ backup_server_user }}'
    group: '{{ backup_server_user }}'
    state: directory
    mode: '0755'
    recurse: yes

- name: Ensure ssh config location exists in AWX
  file:
    path: /root/.ssh/
    owner: root
    group: root
    state: directory
    mode: '0755'

- name: Generate OpenSSH key for AWX system backup
  community.crypto.openssh_keypair:
    path: '/root/.ssh/borg_backup_ed25519'
    comment: 'Borg ssh key for {{ awx_url }}'
    type: ed25519

- name: Collect SSH public key value
  shell: cat '/root/.ssh/borg_backup_ed25519.pub'
  register: public_key

- name: Ensure .ssh folder exists
  delegate_to: '{{ backup_server_hostname }}'
  file: 
    path: '/home/{{ backup_server_user }}/.ssh'
    state: directory
    owner: '{{ backup_server_user }}'
    group: '{{ backup_server_user }}'
    mode: '0755'

- name: Ensure authorised_keys file exists
  delegate_to: '{{ backup_server_hostname }}'
  file: 
    path: '/home/{{ backup_server_user }}/.ssh/authorized_keys'
    state: touch
    owner: '{{ backup_server_user }}'
    group: '{{ backup_server_user }}'
    mode: '0600'

- name: Add AWX backup public keys spacer to authorized_keys of backup server
  delegate_to: '{{ backup_server_hostname }}'
  lineinfile:
    path: '/home/{{ backup_server_user }}/.ssh/authorized_keys'
    line: '# AWX Backups'
    owner: '{{ backup_server_user }}'
    group: '{{ backup_server_user }}'
    mode: '0600'

- name: Add public key to authorized_keys of backup server
  delegate_to: '{{ backup_server_hostname }}'
  lineinfile:
    path: '/home/{{ backup_server_user }}/.ssh/authorized_keys'
    state: present
    regexp: '^command="borg serve --restrict-to-path {{ backup_server_directory }}/AWX/{{ awx_url }}",restrict.*$'
    insertafter: '# AWX Backups'
    line: 'command="borg serve --restrict-to-path {{ backup_server_directory }}/AWX/{{ awx_url }}",restrict {{ public_key.stdout }}'
    owner: '{{ backup_server_user }}'
    group: '{{ backup_server_user }}'
    mode: '0600'

- name: Update SSH config on AWX system
  blockinfile:
    path: /root/.ssh/config
    create: yes
    block: |
      Host {{ backup_server_hostname }}
          HostName {{ backup_server_ip }}
          Port {{ backup_server_ssh_port }}
          User {{ backup_server_user }}
          IdentityFile ~/.ssh/borg_backup_ed25519

- name: Ensure borgmatic config location exists
  file:
    path: /root/.config/borgmatic/
    owner: root
    group: root
    state: directory
    mode: '0755'
    recurse: yes

- name: Save borgmatic config file, template
  template:
    src: '{{ role_path }}/templates/config.yaml.j2'
    dest: '/root/.config/borgmatic/config.yaml'

- name: Initialise borg repo, perform init
  delegate_to: '{{ backup_server_hostname }}'
  shell: ' export BORG_PASSPHRASE={{ backup_awx_encryption_passphrase }}; borg init --encryption=repokey {{ backup_server_directory }}/AWX/{{ awx_url }}'
  args:
    creates: '{{ backup_server_directory }}/AWX/{{ awx_url }}/nonce'

- name: Recursively change ownership of files in backup location
  delegate_to: '{{ backup_server_hostname }}'
  file:
    path: '{{ backup_server_directory }}/AWX/{{ awx_url }}'
    owner: '{{ backup_server_user }}'
    group: '{{ backup_server_user }}'
    state: directory
    recurse: yes

- name: Save clean_backups.py script, template
  delegate_to: '{{ backup_server_hostname }}'
  template:
    src: '{{ role_path }}/templates/cleanup_backups.py.j2'
    dest: '/root/cleanup_backups.py'
    
- name: Ensure the cleanup_backups.py script runs every day
  delegate_to: '{{ backup_server_hostname }}'
  cron:
    name: "Run cleanup_backups.py script"
    special_time: daily
    job: "python3 /root/cleanup_backups.py"
    
